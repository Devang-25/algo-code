package hard;

import java.util.Arrays;
import java.util.HashSet;

/**
 * Created by mns on 10/14/18.
 */
public class MinimizeMalwareSpread {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int [] size = new int[initial.length];
        int [] initSize = new int[initial.length];
        HashSet<Integer> set = new HashSet<>();
        for(Integer i : initial){
            set.add(i);
        }

        Arrays.fill(size,1);
        Arrays.fill(initSize,1);
        for(int i=0;i<initial.length;i++){
            if(size[i] != 1) {
                boolean [] visited = new boolean[graph.length];
                dfs(initial[i], visited, graph);
                int totalCnt = 0;
                int initCnt = 0;
                for(int j =0;j<visited.length;j++){
                    if(visited[j]){
                        totalCnt++;
                        if(set.contains(j)){
                            initCnt++;
                        }
                    }

                }

                for(int j = 0;j<initial.length;j++){
                    size[j] = totalCnt;
                    initSize[j] = initCnt;
                }
            }
        }

        return 0;

    }

    private void dfs(int curr, boolean [] visited, int [][] graph){
        if(visited[curr]){
            return;
        }

        visited[curr] = true;
        for(int j=0;j<visited.length;j++){
            if(graph[curr][j] == 1 && !visited[j]){
                dfs(j,visited,graph);
            }
        }
    }

    public static void main(String[] args) {
        MinimizeMalwareSpread ms = new MinimizeMalwareSpread();
    }
}
